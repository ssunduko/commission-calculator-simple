package com.chapman.edu.commissions.principles.oop.abstraction;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Abstract class that defines the framework for generating reports.
 * This class demonstrates abstraction by:
 * 1. Declaring abstract methods that must be implemented by subclasses
 * 2. Providing common functionality in concrete methods
 * 3. Implementing the Template Method pattern
 */
public abstract class ReportGenerator {
    
    protected String reportTitle;
    protected LocalDate reportDate;
    protected String generatedBy;
    
    /**
     * Constructor with essential fields
     */
    public ReportGenerator(String reportTitle, String generatedBy) {
        this.reportTitle = reportTitle;
        this.reportDate = LocalDate.now();
        this.generatedBy = generatedBy;
    }
    
    /**
     * Template method that defines the algorithm for generating a report.
     * This method demonstrates the Template Method pattern, which is a form of abstraction.
     * 
     * @param startDate The start date for the report period
     * @param endDate The end date for the report period
     * @return The generated report as a string
     */
    public final String generateReport(LocalDate startDate, LocalDate endDate) {
        validateDates(startDate, endDate);
        
        StringBuilder report = new StringBuilder();
        
        // Add report header
        report.append(generateReportHeader());
        
        // Add report metadata
        report.append("\nReport Period: ")
              .append(formatDate(startDate))
              .append(" to ")
              .append(formatDate(endDate))
              .append("\n");
        report.append("Generated On: ").append(formatDate(reportDate)).append("\n");
        report.append("Generated By: ").append(generatedBy).append("\n\n");
        
        // Fetch data for the report
        List<String> reportData = fetchReportData(startDate, endDate);
        
        // Process the data
        String processedData = processReportData(reportData);
        report.append(processedData).append("\n");
        
        // Add report summary
        report.append(generateReportSummary(reportData));
        
        // Add report footer
        report.append("\n").append(generateReportFooter());
        
        return report.toString();
    }
    
    /**
     * Validate that the start date is before or equal to the end date.
     * 
     * @param startDate The start date
     * @param endDate The end date
     * @throws IllegalArgumentException if the dates are invalid
     */
    protected void validateDates(LocalDate startDate, LocalDate endDate) {
        if (startDate == null || endDate == null) {
            throw new IllegalArgumentException("Start date and end date cannot be null");
        }
        
        if (startDate.isAfter(endDate)) {
            throw new IllegalArgumentException("Start date cannot be after end date");
        }
    }
    
    /**
     * Format a date as a string.
     * 
     * @param date The date to format
     * @return The formatted date string
     */
    protected String formatDate(LocalDate date) {
        return date.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
    }
    
    /**
     * Generate the report header.
     * This is a concrete method that can be overridden by subclasses if needed.
     * 
     * @return The report header as a string
     */
    protected String generateReportHeader() {
        return "=== " + reportTitle + " ===";
    }
    
    /**
     * Generate the report footer.
     * This is a concrete method that can be overridden by subclasses if needed.
     * 
     * @return The report footer as a string
     */
    protected String generateReportFooter() {
        return "=== End of Report ===";
    }
    
    /**
     * Abstract method to fetch data for the report.
     * This method must be implemented by concrete subclasses.
     * 
     * @param startDate The start date for the report period
     * @param endDate The end date for the report period
     * @return A list of data items for the report
     */
    protected abstract List<String> fetchReportData(LocalDate startDate, LocalDate endDate);
    
    /**
     * Abstract method to process the report data.
     * This method must be implemented by concrete subclasses.
     * 
     * @param reportData The data to process
     * @return The processed data as a string
     */
    protected abstract String processReportData(List<String> reportData);
    
    /**
     * Abstract method to generate a summary of the report.
     * This method must be implemented by concrete subclasses.
     * 
     * @param reportData The data to summarize
     * @return The report summary as a string
     */
    protected abstract String generateReportSummary(List<String> reportData);
    
    /**
     * Get the report title.
     * 
     * @return The report title
     */
    public String getReportTitle() {
        return reportTitle;
    }
    
    /**
     * Set the report title.
     * 
     * @param reportTitle The new report title
     */
    public void setReportTitle(String reportTitle) {
        this.reportTitle = reportTitle;
    }
    
    /**
     * Get the report date.
     * 
     * @return The report date
     */
    public LocalDate getReportDate() {
        return reportDate;
    }
    
    /**
     * Get the name of the person who generated the report.
     * 
     * @return The name of the person who generated the report
     */
    public String getGeneratedBy() {
        return generatedBy;
    }
    
    /**
     * Set the name of the person who generated the report.
     * 
     * @param generatedBy The name of the person who generated the report
     */
    public void setGeneratedBy(String generatedBy) {
        this.generatedBy = generatedBy;
    }
}