package com.chapman.edu.commissions.principles.oop.abstraction;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

/**
 * This class demonstrates how abstraction works with the report generator classes.
 * It shows:
 * 1. Creating instances of concrete report generator classes
 * 2. How abstract classes define a common structure
 * 3. How the Template Method pattern works
 * 4. How abstraction simplifies interaction with complex systems
 */
public class AbstractionDemo {
    
    public static void main(String[] args) {
        System.out.println("Abstraction Demonstration\n");
        
        // Define report period
        LocalDate startDate = LocalDate.of(2023, 1, 1);
        LocalDate endDate = LocalDate.of(2023, 3, 31);
        
        // Create instances of concrete report generator classes
        CommissionReportGenerator commissionReport = new CommissionReportGenerator(
            "Q1 2023 Commission Report", 
            "Finance Department",
            "North America Sales Team"
        );
        
        SalesReportGenerator salesReport = new SalesReportGenerator(
            "Q1 2023 Sales Report", 
            "Sales Department",
            "Western Region"
        );
        
        PerformanceReportGenerator performanceReport = new PerformanceReportGenerator(
            "Q1 2023 Performance Review", 
            "HR Department",
            "Engineering"
        );
        
        // Set specific performance levels for some employees
        performanceReport.setEmployeePerformance("EMP001", PerformanceReportGenerator.PerformanceLevel.OUTSTANDING);
        performanceReport.setEmployeePerformance("EMP002", PerformanceReportGenerator.PerformanceLevel.EXCEEDS_EXPECTATIONS);
        
        // Add all report generators to a list (demonstrating abstraction)
        List<ReportGenerator> reportGenerators = new ArrayList<>();
        reportGenerators.add(commissionReport);
        reportGenerators.add(salesReport);
        reportGenerators.add(performanceReport);
        
        // Demonstrate abstraction by generating reports using the common interface
        System.out.println("1. Generating reports using the common abstract class interface:");
        for (ReportGenerator generator : reportGenerators) {
            System.out.println("\nGenerating report: " + generator.getReportTitle());
            System.out.println("Report type: " + generator.getClass().getSimpleName());
            System.out.println("Generated by: " + generator.getGeneratedBy());
            System.out.println("\nGenerating report...");
            
            // This demonstrates the Template Method pattern
            // The generateReport method is defined in the abstract class
            // but it calls abstract methods that are implemented by concrete classes
            String report = generator.generateReport(startDate, endDate);
            
            // Print a preview of the report (first 500 characters)
            String preview = report.length() > 500 ? report.substring(0, 500) + "..." : report;
            System.out.println("\nReport Preview:");
            System.out.println(preview);
            System.out.println("\n" + "-".repeat(80));
        }
        
        // Demonstrate the Template Method pattern in more detail
        System.out.println("\n2. Template Method Pattern in Action:");
        System.out.println("\nThe ReportGenerator abstract class defines the template method 'generateReport'");
        System.out.println("which calls the following methods in sequence:");
        System.out.println("  1. validateDates() - Concrete method in abstract class");
        System.out.println("  2. generateReportHeader() - Concrete method that can be overridden");
        System.out.println("  3. fetchReportData() - Abstract method implemented by subclasses");
        System.out.println("  4. processReportData() - Abstract method implemented by subclasses");
        System.out.println("  5. generateReportSummary() - Abstract method implemented by subclasses");
        System.out.println("  6. generateReportFooter() - Concrete method that can be overridden");
        
        // Demonstrate the benefits of abstraction
        System.out.println("\n3. Benefits of Abstraction:");
        System.out.println("  - Reduced Complexity: Client code only needs to call generateReport()");
        System.out.println("  - Enhanced Security: Implementation details are hidden");
        System.out.println("  - Easy Maintenance: Changes to implementation don't affect the abstraction's users");
        System.out.println("  - Focused Design: Focus on essential features without getting lost in details");
        System.out.println("  - Code Reusability: Abstract class provides common functionality for subclasses");
        
        // Demonstrate how abstraction simplifies interaction with complex systems
        System.out.println("\n4. Simplified Interaction with Complex Systems:");
        System.out.println("Without abstraction, client code would need to:");
        System.out.println("  1. Validate input dates");
        System.out.println("  2. Fetch data from a data source");
        System.out.println("  3. Process the data into a readable format");
        System.out.println("  4. Generate a summary of the data");
        System.out.println("  5. Format the report with headers and footers");
        System.out.println("\nWith abstraction, client code simply calls:");
        System.out.println("  reportGenerator.generateReport(startDate, endDate)");
        
        // Generate a complete report to demonstrate the final result
        System.out.println("\n5. Complete Commission Report Example:");
        System.out.println("\n" + commissionReport.generateReport(startDate, endDate));
    }
}